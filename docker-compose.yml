version: '3'
services:
  #UserServicePostgres Database
  userservicepostgres:
    container_name: userservicepostgres
    restart: always
    image: postgres:latest
    ports:
      - '5432:5432'
    restart: always
    volumes:
      - dataPostgres:/var/lib/postgresql/data
    env_file:
      - ./env/docker.env

  #UserMicroservice
  userservice:
    container_name: userservice
    build: ./microservices/user-service
    restart: always
    volumes:
      - ./microservices/user-service/src:/app/src
      - /app/node_modules
    env_file:
      - ./microservices/user-service/.env
    depends_on:
      - userservicepostgres
      - rabbitmq

  #ApiGateway
  apigateway:
    container_name: apigateway
    restart: always
    build: ./api-gateway
    volumes:
      - ./api-gateway/src:/app/src
      - /app/node_modules
    env_file:
      - ./api-gateway/.env
    ports:
      - '8000:8000'
    depends_on:
      - rabbitmq
      - userservice
  #PGAdmin
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    restart: always
    ports:
      - '8080:80'
    # volumes:
    #   - dataPgAdmin:/root/.pgadmin
    env_file:
      - ./env/docker.env

  #RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management
    container_name: 'rabbitmq'
    tty: true
    restart: always
    env_file:
      - ./env/docker.env
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - dataRabbitMQ:/var/lib/rabbitmq/
      - logRabbitMQ:/var/log/rabbitmq
volumes:
  dataPostgres:
  dataPgAdmin:
  dataRabbitMQ:
  logRabbitMQ:
# networks:
#   postgres:
#     driver: bridge
